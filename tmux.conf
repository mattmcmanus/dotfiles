# ==========================
# ===  General settings  ===
# ==========================

# set -g default-terminal "screen-256color"
# set -g history-limit 50000
# set -g buffer-limit 20
# set -sg escape-time 0 # Allows for faster key repetition
# set -g display-time 3000
# set -g remain-on-exit off
# set -g repeat-time 300
# setw -g allow-rename off
# setw -g automatic-rename off
# setw -g aggressive-resize on

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# # Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# # Enable mouse support
set -g mouse on


# # ==========================
# # ===   Key bindings     ===
# # ==========================

# # Unbind default key bindings, we're going to override
# unbind "\$" # rename-session
# unbind ,    # rename-window
# unbind %    # split-window -h
# unbind '"'  # split-window
# # unbind }    # swap-pane -D
# # unbind {    # swap-pane -U
# unbind [    # paste-buffer
# unbind ]    
# unbind "'"  # select-window
# unbind n    # next-window
# unbind p    # previous-window
# unbind l    # last-window
# unbind M-n  # next window with alert
# unbind M-p  # next window with alert
# unbind o    # focus thru panes
# unbind &    # kill-window
# unbind "#"  # list-buffer 
# unbind =    # choose-buffer
# unbind z    # zoom-pane
# unbind M-Up  # resize 5 rows up
# unbind M-Down # resize 5 rows down
# unbind M-Right # resize 5 rows right
# unbind M-Left # resize 5 rows left


# # Edit configuration and reload
# bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# # Reload tmux configuration 
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# # new window and retain cwd
# bind c new-window -c "#{pane_current_path}"

# # Prompt to rename window right after it's created
# set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# # Rename session and window
# bind r command-prompt -I "#{window_name}" "rename-window '%%'"
# bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# # Split panes
# bind | split-window -h -c "#{pane_current_path}"
# bind _ split-window -v -c "#{pane_current_path}"

# # Select pane and windows
# bind -r C-[ previous-window
# bind -r C-] next-window
# bind -r [ select-pane -t :.-
# bind -r ] select-pane -t :.+
# bind -r Tab last-window   # cycle thru MRU tabs
# bind -r C-o swap-pane -D

# # Zoom pane
# bind + resize-pane -Z

# # Link window
# bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# # Swap panes back and forth with 1st pane
# # When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
# # bind \ if '[ #{pane_index} -eq 1 ]' \
# #      'swap-pane -s "!"' \
# #      'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# # Kill pane/window/session shortcuts
# bind x kill-pane
# bind X kill-window
# bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
# bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# # Merge session with another one (e.g. move all windows)
# # If you use adhoc 1-window sessions, and you want to preserve session upon exit
# # but don't want to create a lot of small unnamed 1-window sessions around
# # move all windows from current session to main named one (dev, work, etc)
# bind C-u command-prompt -p "Session to merge with: " \
#    "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# # Detach from session
# bind d detach
# bind D if -F '#{session_many_attached}' \
#     'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
#     'display "Session has only 1 client attached"'

# # Hide status bar on demand
# bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'



# # ==================================================
# # === Window monitoring for activity and silence ===
# # ==================================================
# bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
# bind M if -F '#{monitor-silence}' \
#     'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
#     'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# # Activity bell and whistles
# set -g visual-activity on


# # ================================================
# # ===     Copy mode, scroll and clipboard      ===
# # ================================================
set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

# bind p paste-buffer
# bind C-p choose-buffer

# # trigger copy mode by
# bind -n M-Up copy-mode

# # Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# # When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# # Copy selected text
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
# bind -T copy-mode-vi Y send-keys -X copy-line \;\
#     run "tmux save-buffer - | $yank"
# bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
#     run "tmux save-buffer - | $yank"
# bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
# bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
#     run "tmux save-buffer - | $yank"

# # Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# # clear select on subsequence mouse click
# bind -T copy-mode-vi MouseDragEnd1Pane \
#     send-keys -X copy-pipe "$yank"
# bind -T copy-mode-vi MouseDown1Pane select-pane \;\
#    send-keys -X clear-selection
    
# # iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# # tmux show-options -g -s set-clipboard
# # set-clipboard on|external

# # open a man page in new pane or window
# bind m command-prompt -p "man page:" "split-window -h 'exec man %%'"
# bind M command-prompt -p "Man page:" "new-window -n 'man %1' 'exec man %1'"

#--Status-Bar-------------------------------------------------------------------
# Default colors
# set -g status-bg black
# set -g status-fg white

# set -g status-bg "#000000"
# #set -g status-fg white
# set -g status-left "#[fg=green]#h[#[fg=white]#S#[fg=green]]"
# set -g status-left-length 100
# set -g status-right "#[fg=yellow,bright]%H:%M #[default]"
# set -g status-right-length 100
# setw -g window-status-current-format " #I:#W "
# setw -g window-status-format " #I:#W "
# set -g status-justify centre # Center the window list

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'wfxr/tmux-power'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

set -g @tmux_power_theme 'snow'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
