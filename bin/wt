#!/usr/bin/env bash
set -e

# Switch between git worktrees with speed.

args=("$@")
VERSION="0.1.1"
TMP_PATH=$(mktemp)
BINARY_PATH=$(which wt)

# Escape forward slash
arg=$(echo "${args[0]}" | sed 's/\//\\\//g')

# show worktree list
worktree_list() {
	git worktree list
}

help_message() {
	echo -e "wt lets you switch between your git worktrees with speed.\n"
	echo "Usage:"
	echo -e "\twt <worktree-name>: search for worktree names and change to that directory."
	echo -e "\twt list: list out all the git worktrees."
	echo -e "\twt help: shows this help message."
	echo -e "\twt add <worktree-name>: add a new worktree and switch to it."
	echo -e "\twt remove [worktree-name]: remove an existing worktree."
}

get_relative_path() {
	current_worktree_root=$(git rev-parse --show-toplevel)
	current_path=$(pwd)
	if [ "$current_worktree_root" = "$current_path" ]; then
		relative_path="."
	else
		relative_path=${current_path#$current_worktree_root/}
	fi
	echo $relative_path
}

change_worktree() {
	relative_path=$(get_relative_path)
	echo Changing to worktree at: "$worktree_dir"
	cd "$worktree_dir"
	# Check if the relative path exists in the new worktree and navigate if it does
	if [ -d "$relative_path" ]; then
		cd "$relative_path"
	fi
	exec $SHELL
}

add_new_worktree() {
	local name="$1"
	goto_main_worktree
	git worktree add "../$name"
	cd ../$name
	exec $SHELL
	post_add_worktree
}

remove_worktree() {
	SELECTION=$(select_worktree "$1")
	if [ -z "$SELECTION" ]; then
		echo "No worktree selected for removal."
		exit 0
	fi
	worktree_dir=$(cut -d" " -f1 <<<"$SELECTION")
	echo "You are about to remove the worktree at: $worktree_dir"
	read -p "Are you sure? (y/N): " confirmation
	case "$confirmation" in
	[yY][eE][sS] | [yY])
		echo "Removing..."
		git worktree remove "$worktree_dir"
		git worktree prune
		echo "Worktree removed and pruned."
		;;
	*)
		echo "Worktree removal cancelled."
		;;
	esac
}

# Custom code to run after the worktree is created
post_add_worktree() {
	pnpm install
	if [ -d "../vscode-prefs" ]; then
		echo "Copying vscode defaults"
		cp ../vscode-defaults/* .vscode/
	fi
	code .
}

# Function to select a worktree using fzf
select_worktree() {
	git worktree list | sed -r 's/^(.*\/([^[:space:]]* ))/\1 \2/g' | fzf --with-nth=2,4 --height 10 --border --prompt "tree: " --query="$1"
}

case "${args[0]}" in
list)
	worktree_list
	;;
add)
	if [ -z "${args[1]}" ]; then
		echo "Error: No name provided for the new worktree."
		exit 1
	else
		add_new_worktree "${args[1]}"
	fi
	;;
remove)
	remove_worktree "${args[1]}"
	;;
help)
	help_message
	;;
*)
	SELECTION=$(select_worktree $arg)
	if [ "$SELECTION" = "" ]; then
		exit 0
	fi
	worktree_dir=$(cut -d" " -f1 <<<"$SELECTION")
	change_worktree
	;;
esac
