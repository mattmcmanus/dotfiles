#!/bin/bash

usage() { 
  echo "Usage: $0 [-g <grep>] -p <prefix> [-b <body>] [-l <gh label>] [-d] [-h]"
  echo "  -g: conditionally grep the list of commits that are cherry-picked"
  echo "  -p: specify the prefix that is used in the branch name and used in the PR title"
  echo "  -b: specify the body that is used in the PR. Defaults to the prefix if not provided"
  echo "  -d: Print out the commands that will be run rather than run them"
  echo "  -l: The label to use in the PR. Defaults to tech-story. Accepts user-story, tech-story, chore"
  echo "  -h"
  exit 0
}

label="tech-story"
body=""

# Parse arguments
while getopts "g::p:b:dl:" opt; do
  case ${opt} in
    g )
      grep_messages=$OPTARG
      ;;
    p )
      prefix=$OPTARG
      ;;
    b )
      body=$OPTARG
      ;;
    d )
      dry_run=true
      ;;
    l )
      label=$OPTARG
      if [[ "$label" != "chore" && "$label" != "user-story" && "$label" != "tech-story" ]]; then
        echo "Error: Invalid label. Accepts only chore, user-story, or tech-story."
        exit 1
      fi
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND -1))

if [ -z "$body" ]
then
  body=$prefix
fi

function run() {
    local command="$1"

    echo ""
    echo "-> $command"
    echo ""

    if [ "$dry_run" != "true" ]; then
        eval "$command"
    fi
}

# Name of the branch to cherry-pick from
source_branch=$(git rev-parse --abbrev-ref HEAD)

# Name of the branch to cherry-pick to
target_branch="develop"

# Get all commit hashes from the source branch that are not in the target branch 
if [ -z "$grep_messages" ]
then
  commits=$(git log --format=format:%H $target_branch..$source_branch)
else
  commits=$(git log --format=format:%H --grep="${grep_messages}" $target_branch..$source_branch)
fi

index=0
for commit in $commits
do
  # Create a new branch from develop
  run "git checkout -b ${prefix}-$index $target_branch"

  # Cherry-pick the commit
  run "git cherry-pick $commit"

	run "git push"

  # Get the commit message
  commit_message=$(git log -1 --pretty=%B $commit)

  # Create a new draft PR
	title="${prefix}: $commit_message"
  run "gh pr create --title \"$title\" --body \"$body\" --draft -a \"@me\" -l \"$label\"" 

  index=$((index+1))

	echo ""
	echo "#########################################################################"
	echo ""
  sleep 5
done
